#import time
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
# Input and output variables 
Qr = ctrl.Antecedent(np.arange(0,61,1),'Qr')
Wtr = ctrl.Antecedent(np.arange(0,301,1),'Wtr')
Emr = ctrl.Antecedent(np.arange(0,6,1),'Emr')
Emg = ctrl.Antecedent(np.arange(0,6,1),'Emg')
Dht= ctrl.Consequent(np.arange(0,61,1), 'Dht')
Pem= ctrl.Consequent(np.arange(0,5,1), 'Pem')
Qg = ctrl.Antecedent(np.arange(0,61,1),'Qg')
Ge=  ctrl.Consequent(np.arange(0,61,1),'Ge')

Qr['zero']= fuzz.trimf(Qr.universe,[0,0,15])
Qr['small']= fuzz.trimf(Qr.universe,[0,15,30])
Qr['medium']= fuzz.trimf(Qr.universe,[15,30,45])
Qr['large']= fuzz.trimf(Qr.universe,[30,45,60])
Qr['very large']= fuzz.trimf(Qr.universe,[45, 60,60])
#Qr.view()
Wtr ['zero'] = fuzz.trimf(Wtr.universe,[0,0,75])
Wtr ['short'] = fuzz.trimf(Wtr.universe,[0,75,150])
Wtr ['medium'] = fuzz.trimf(Wtr.universe,[75,150,225])
Wtr ['long'] = fuzz.trimf(Wtr.universe,[150,225,300])
Wtr ['very long'] = fuzz.trimf(Wtr.universe,[225,300,300])
#Wtr.view()
Emr['none']= fuzz.trimf(Emr.universe,[0, 0, 1])
Emr['few']= fuzz.trimf(Emr.universe,[1, 3, 4])
Emr['many']= fuzz.trimf(Emr.universe,[4, 5, 5])
#Emr.view()
Emg['none']= fuzz.trimf(Emg.universe,[0, 0, 1])
Emg['few']= fuzz.trimf(Emg.universe,[1, 3, 4])
Emg['many']= fuzz.trimf(Emg.universe,[4, 5, 5])
#Emg.view()
#Er.view()
Pem['no']= fuzz.trimf(Pem.universe,[0, 0, 1])
Pem['Emg']= fuzz.trimf(Pem.universe,[ 1, 2,3])
Pem['Emr']= fuzz.trimf(Pem.universe,[ 3, 4, 4])
#Pem.view()
Dht['zero']= fuzz.trimf(Dht.universe,[0,0,15])
Dht['small']= fuzz.trimf(Dht.universe,[0,15,30])
Dht['medium']= fuzz.trimf(Dht.universe,[15,30,45])
Dht['large']= fuzz.trimf(Dht.universe,[30,45,60])
Dht['very large']= fuzz.trimf(Dht.universe, [45, 60, 60])
#Dht.view()
#Membership Functions 
Qg['zero']= fuzz.trimf(Qg.universe,[0,0,15])
Qg['small']= fuzz.trimf(Qg.universe,[0,15,30])
Qg['medium']= fuzz.trimf(Qg.universe,[15,30,45])
Qg['large']= fuzz.trimf(Qg.universe,[30,45,60])
Qg['very large']= fuzz.trimf(Qg.universe,[45, 60,60])
#Qg.view()
Ge['turnr']= fuzz.trimf(Ge.universe,[0,0,15])
Ge['short']= fuzz.trimf(Ge.universe,[0,15,30])
Ge['medium']= fuzz.trimf(Ge.universe,[15,30,45])
Ge['long']= fuzz.trimf(Ge.universe,[30,45,60])
Ge['very long']= fuzz.trimf(Ge.universe,[45, 60, 60])
#Ge.view()
# Fuzzy Rule Base of PECM, Stage 1
rule1 = ctrl.Rule(Emg['none'] & Emr['none'], Pem['no'])
rule2 = ctrl.Rule(Emg['none'] & Emr['few'], Pem['Emr'])
rule3 = ctrl.Rule(Emg['none'] & Emr['many'], Pem['Emr'])
rule4 = ctrl.Rule(Emg['few'] & Emr['none'], Pem['Emg'])
rule5 = ctrl.Rule(Emg['few'] & Emr['few'], Pem['Emg'])
rule6 = ctrl.Rule(Emg['few'] & Emr['many'], Pem['Emr'])
rule7 = ctrl.Rule(Emg['many'] & Emr['none'], Pem['Emg'])
rule8 = ctrl.Rule(Emg['many'] & Emr['few'], Pem['Emg'])
rule9 = ctrl.Rule(Emg['many'] & Emr['many'], Pem['Emg'])
PECM_ctrl = ctrl.ControlSystem([rule1, rule2, rule3,rule4,rule5,rule6, rule7, rule8,rule9])
Prioritize_signal = ctrl.ControlSystemSimulation(PECM_ctrl)
Prioritize_signal.input['Emr'] = 5
Prioritize_signal.input['Emg'] = 1.5
# Crunch the numbers
Prioritize_signal.compute()
print (Prioritize_signal.output['Pem'])
Pem.view(sim=Prioritize_signal)

#Fuzzy Rule Base of Module of Degree of heavy traffic in red phase,Stage1
rule10 = ctrl.Rule(Qr['zero'] & Wtr['zero'], Dht['zero'])
rule11 = ctrl.Rule(Qr['zero'] & Wtr['short'], Dht['zero'])
rule12 = ctrl.Rule(Qr['zero'] & Wtr['medium'], Dht['small'])
rule13 = ctrl.Rule(Qr['zero'] & Wtr['long'], Dht['small'])
rule14 = ctrl.Rule(Qr['zero'] & Wtr['very long'], Dht['medium'])
rule15 = ctrl.Rule(Qr['small'] & Wtr['zero'], Dht['zero'])
rule16 = ctrl.Rule(Qr['small'] & Wtr['short'], Dht['small'])
rule17 = ctrl.Rule(Qr['small'] & Wtr['medium'], Dht['medium'])
rule18 = ctrl.Rule(Qr['small'] & Wtr['long'], Dht['medium'])
rule19 = ctrl.Rule(Qr['small'] & Wtr['very long'], Dht['large'])
rule20 = ctrl.Rule(Qr['medium'] & Wtr['zero'], Dht['small'])
rule21 = ctrl.Rule(Qr['medium'] & Wtr['short'], Dht['medium'])
rule22 = ctrl.Rule(Qr['medium'] & Wtr['medium'], Dht['medium'])
rule23 = ctrl.Rule(Qr['medium'] & Wtr['long'], Dht['large'])
rule24 = ctrl.Rule(Qr['medium'] & Wtr['very long'], Dht['large'])
rule25 = ctrl.Rule(Qr['large'] & Wtr['zero'], Dht['medium'])
rule26 = ctrl.Rule(Qr['large'] & Wtr['short'], Dht['medium'])
rule27 = ctrl.Rule(Qr['large'] & Wtr['medium'], Dht['large'])
rule28 = ctrl.Rule(Qr['large'] & Wtr['long'], Dht['large'])
rule29 = ctrl.Rule(Qr['large'] & Wtr['very long'], Dht['very large'])
rule30 = ctrl.Rule(Qr['very large'] & Wtr['zero'], Dht['medium'])
rule31 = ctrl.Rule(Qr['very large'] & Wtr['short'], Dht['large'])
rule32 = ctrl.Rule(Qr['very large'] & Wtr['medium'], Dht['very large'])
rule33 = ctrl.Rule(Qr['very large'] & Wtr['long'], Dht['very large'])
rule34 = ctrl.Rule(Qr['very large'] & Wtr['very long'], Dht['very large'])

HTEM_ctrl = ctrl.ControlSystem([rule10,rule11, rule12, rule13,rule14,rule15,rule16, rule17,
                                rule18,rule19,rule20,rule21,rule22, rule23, rule24,rule25,rule26, rule27, rule28,rule29,rule30,rule31, rule32, rule33,
                                rule34])
Degree_heavy = ctrl.ControlSystemSimulation(HTEM_ctrl)
Degree_heavy.input['Qr'] = 1
Degree_heavy.input['Wtr'] = 3

# Crunch the numbers
Degree_heavy.compute()

print (Degree_heavy.output['Dht'])
Dht.view(sim=Degree_heavy)
#Fuzzy Rule Base of Module of Extension time of green time, Third Stage 
rule35 = ctrl.Rule(Dht['zero'] & Qg['zero'] & Pem['no'], Ge['short'])
rule36 = ctrl.Rule(Dht['zero'] & Qg['zero'] & Pem['Emg'], Ge['short'])
rule37 = ctrl.Rule(Dht['zero'] & Qg['zero'] & Pem['Emr'], Ge['turnr'])
rule38 = ctrl.Rule(Dht['zero'] & Qg['small'] & Pem['no'], Ge['short'])
rule39 = ctrl.Rule(Dht['zero'] & Qg['small'] & Pem['Emg'], Ge['medium'])
rule40 = ctrl.Rule(Dht['zero'] & Qg['small'] & Pem['Emr'], Ge['turnr'])
rule41 = ctrl.Rule(Dht['zero'] & Qg['medium'] & Pem['no'], Ge['medium'])
rule42 = ctrl.Rule(Dht['zero'] & Qg['medium'] & Pem['Emg'], Ge['medium'])
rule43 = ctrl.Rule(Dht['zero'] & Qg['medium'] & Pem['Emr'], Ge['turnr'])
rule44 = ctrl.Rule(Dht['zero'] & Qg['large'] & Pem['no'], Ge['medium'])
rule45 = ctrl.Rule(Dht['zero'] & Qg['large'] & Pem['Emg'], Ge['long'])
rule46 = ctrl.Rule(Dht['zero'] & Qg['large'] & Pem['Emr'], Ge['turnr'])
rule47 = ctrl.Rule(Dht['zero'] & Qg['very large'] & Pem['no'], Ge['long'])
rule48 = ctrl.Rule(Dht['zero'] & Qg['very large'] & Pem['Emg'], Ge['very long'])
rule49 = ctrl.Rule(Dht['zero'] & Qg['very large'] & Pem['Emr'], Ge['turnr'])
rule50 = ctrl.Rule(Dht['small'] & Qg['zero'] & Pem['no'], Ge['turnr'])
rule51 = ctrl.Rule(Dht['small'] & Qg['zero'] & Pem['Emg'], Ge['short'])
rule52 = ctrl.Rule(Dht['small'] & Qg['zero'] & Pem['Emr'], Ge['turnr'])
rule53 = ctrl.Rule(Dht['small'] & Qg['small'] & Pem['no'], Ge['short'])
rule54 = ctrl.Rule(Dht['small'] & Qg['small'] & Pem['Emg'], Ge['short'])
rule55 = ctrl.Rule(Dht['small'] & Qg['small'] & Pem['Emr'], Ge['turnr'])
rule56 = ctrl.Rule(Dht['small'] & Qg['medium'] & Pem['no'], Ge['medium'])
rule57 = ctrl.Rule(Dht['small'] & Qg['medium'] & Pem['Emg'], Ge['medium'])
rule58 = ctrl.Rule(Dht['small'] & Qg['medium'] & Pem['Emr'], Ge['turnr'])
rule59 = ctrl.Rule(Dht['small'] & Qg['large'] & Pem['no'], Ge['long'])
rule60 = ctrl.Rule(Dht['small'] & Qg['large'] & Pem['Emg'], Ge['long'])
rule61 = ctrl.Rule(Dht['small'] & Qg['large'] & Pem['Emr'], Ge['turnr'])
rule62 = ctrl.Rule(Dht['small'] & Qg['very large'] & Pem['no'], Ge['long'])
rule63 = ctrl.Rule(Dht['small'] & Qg['very large'] & Pem['Emg'], Ge['very long'])
rule64 = ctrl.Rule(Dht['small'] & Qg['very large'] & Pem['Emr'], Ge['turnr'])
rule65 = ctrl.Rule(Dht['medium'] & Qg['zero'] & Pem['no'], Ge['turnr'])
rule66 = ctrl.Rule(Dht['medium'] & Qg['zero'] & Pem['Emg'], Ge['short'])
rule67 = ctrl.Rule(Dht['medium'] & Qg['zero'] & Pem['Emr'], Ge['turnr'])
rule68 = ctrl.Rule(Dht['medium'] & Qg['small'] & Pem['no'], Ge['turnr'])
rule69 = ctrl.Rule(Dht['medium'] & Qg['small'] & Pem['Emg'], Ge['short'])
rule70 = ctrl.Rule(Dht['medium'] & Qg['small'] & Pem['Emr'], Ge['turnr'])
rule71 = ctrl.Rule(Dht['medium'] & Qg['medium'] & Pem['no'], Ge['short'])
rule72 = ctrl.Rule(Dht['medium'] & Qg['medium'] & Pem['Emg'], Ge['medium'])
rule73 = ctrl.Rule(Dht['medium'] & Qg['medium'] & Pem['Emr'], Ge['turnr'])
rule74 = ctrl.Rule(Dht['medium'] & Qg['large'] & Pem['no'], Ge['medium'])
rule75 = ctrl.Rule(Dht['medium'] & Qg['large'] & Pem['Emg'], Ge['long'])
rule76 = ctrl.Rule(Dht['medium'] & Qg['large'] & Pem['Emr'], Ge['turnr'])
rule77 = ctrl.Rule(Dht['medium'] & Qg['very large'] & Pem['no'], Ge['long'])
rule78 = ctrl.Rule(Dht['medium'] & Qg['very large'] & Pem['Emg'], Ge['very long'])
rule79 = ctrl.Rule(Dht['medium'] & Qg['very large'] & Pem['Emr'], Ge['turnr'])
rule80 = ctrl.Rule(Dht['large'] & Qg['zero'] & Pem['no'], Ge['turnr'])
rule81 = ctrl.Rule(Dht['large'] & Qg['zero'] & Pem['Emg'], Ge['short'])
rule82 = ctrl.Rule(Dht['large'] & Qg['zero'] & Pem['Emr'], Ge['turnr'])
rule83 = ctrl.Rule(Dht['large'] & Qg['small'] & Pem['no'], Ge['turnr'])
rule84 = ctrl.Rule(Dht['large'] & Qg['small'] & Pem['Emg'], Ge['medium'])
rule85 = ctrl.Rule(Dht['large'] & Qg['small'] & Pem['Emr'], Ge['turnr'])
rule86 = ctrl.Rule(Dht['large'] & Qg['medium'] & Pem['no'], Ge['short'])
rule87 = ctrl.Rule(Dht['large'] & Qg['medium'] & Pem['Emg'], Ge['medium'])
rule88 = ctrl.Rule(Dht['large'] & Qg['medium'] & Pem['Emr'], Ge['turnr'])
rule89 = ctrl.Rule(Dht['large'] & Qg['large'] & Pem['no'], Ge['long'])
rule90= ctrl.Rule(Dht['large'] & Qg['large'] & Pem['Emg'], Ge['long'])
rule91 = ctrl.Rule(Dht['large'] & Qg['large'] & Pem['Emr'], Ge['turnr'])
rule92 = ctrl.Rule(Dht['large'] & Qg['very large'] & Pem['no'], Ge['long'])
rule93 = ctrl.Rule(Dht['large'] & Qg['very large'] & Pem['Emg'], Ge['very long'])
rule94 = ctrl.Rule(Dht['large'] & Qg['very large'] & Pem['Emr'], Ge['turnr'])
rule95 = ctrl.Rule(Dht['very large'] & Qg['zero'] & Pem['no'], Ge['turnr'])
rule96 = ctrl.Rule(Dht['very large'] & Qg['zero'] & Pem['Emg'] , Ge['short'])
rule97 = ctrl.Rule(Dht['very large'] & Qg['zero'] & Pem['Emr'], Ge['turnr'])
rule98 = ctrl.Rule(Dht['very large'] & Qg['small'] & Pem['no'], Ge['turnr'])
rule99 = ctrl.Rule(Dht['very large'] & Qg['small'] & Pem['Emg'], Ge['short'])
rule100 = ctrl.Rule(Dht['very large'] & Qg['small'] & Pem['Emr'], Ge['turnr'])
rule101 = ctrl.Rule(Dht['very large'] & Qg['medium'] & Pem['no'], Ge['short'])
rule102 = ctrl.Rule(Dht['very large'] & Qg['medium'] & Pem['Emg'], Ge['medium'])
rule103  = ctrl.Rule(Dht['very large'] & Qg['medium'] & Pem['Emr'], Ge['turnr'])
rule104  = ctrl.Rule(Dht['very large'] & Qg['large'] & Pem['no'], Ge['medium'])
rule105 = ctrl.Rule(Dht['very large'] & Qg['large'] & Pem['Emg'], Ge['long'])
rule106 = ctrl.Rule(Dht['very large'] & Qg['large'] & Pem['Emr'], Ge['turnr'])
rule107 = ctrl.Rule(Dht['very large'] & Qg['very large'] & Pem['no'], Ge['medium'])
rule108 = ctrl.Rule(Dht['very large'] & Qg['very large'] & Pem['Emg'], Ge['long'])
rule109  = ctrl.Rule(Dht['very large'] & Qg['very large'] & Pem['Emr'], Ge['turnr'])

Etdm_ctrl = ctrl.ControlSystem([rule1, rule2, rule3,rule4,rule5,rule6, rule7, rule8,rule9,rule10,rule11, rule12, rule13,rule14,rule15,rule16, rule17,
                                rule18,rule19,rule20,rule21,rule22, rule23, rule24,rule25,rule26, rule27, rule28,rule29,rule30,rule31, rule32, rule33,
                                rule34,rule35,rule36, rule37, rule38,rule39,rule40,rule41, rule42, rule43,rule44,rule45,rule46,rule47, rule48, rule49,
                                rule50,rule51, rule52, rule53,rule54,rule55,rule56, rule57, rule58,rule59,rule60,rule61, rule62, rule63,rule64,rule65,
                                rule66, rule67, rule68,rule69,rule70,rule71,rule72, rule73, rule74,rule75,rule76, rule77, rule78,rule79,rule80,rule81, 
                                rule82, rule83,rule84,rule85,rule86, rule87, rule88,rule89,rule90,rule91, rule92, rule93,rule94,rule95,rule96,rule97, 
                                rule98, rule99,rule99,rule100, rule101, rule102,rule103,rule104,rule105, rule106, rule107,rule108,rule109])
Extension_time = ctrl.ControlSystemSimulation(Etdm_ctrl)
Extension_time.input['Qr'] = 1
Extension_time.input['Wtr'] = 3
Extension_time.input['Qg'] = 65
Extension_time.input['Emr'] = 5
Extension_time.input['Emg'] = 1.5

# Crunch the numbers
Extension_time.compute()

print (Extension_time.output['Ge'])
Ge.view(sim=Extension_time)
